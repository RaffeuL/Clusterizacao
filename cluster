import numpy as np
import matplotlib.pyplot as plt

db = np.array([[-1.4604656391756727, -48.49018228286093],[-1.451930888687902, -48.499220750560184],[-1.4612874925075803, -48.50614211327731],[-1.441701812088045, -48.47251352162145],[-1.45403435115112, -48.48125418968429],[-1.4460860311053345, -48.49247068631218],[-1.4516728901346323, -48.47088335395985],[-1.4414985113442584, -48.48396778012061],[-1.4353577245926055, -48.461231022865576],
[-1.4307809790479655, -48.44657331102709],[-1.405553204755154, -48.39525609284591],[-1.4263573368146314, -48.38713473769047],[-1.4088234441260694, -48.43149413405749],[-1.3982805453813087, -48.420239285295146],[-1.3783543293620306, -48.44536958653357],[-1.4039168233245072, -48.454042036579374],[-1.4167590758127035, -48.451292594864235],[-1.3897487608703423, -48.47377362062006],
[-1.453685267608362, -48.46125716476908],[-1.4726149687525074, -48.4812115608237],[-1.461289383167128, -48.476269378349194],[-1.4639113620495543, -48.463052385794114],[-1.4710740911674016, -48.493828537472304],[-1.4572700631459108, -48.45142825057649],[-1.4640050813315617, -48.44144570583303],
[-1.3755710106879453, -48.45528349884012],[-1.3681213471779412, -48.43245085902837],[-1.3385347835259158, -48.44396173098849],[-1.3674542656254238, -48.443695086295804],[-1.3605243374818026, -48.473663802756164],[-1.3659203114416607, -48.46125467637987],[-1.3392568437655885, -48.47398542639495],[-1.3190181059068775, -48.4414942365848],[-1.3715635883614987, -48.425078044297955],
[-1.4139272791203212, -48.48431782442863],[-1.3993270522837515, -48.48132244318622],[-1.4067431418695175, -48.49127171109752],[-1.4245963212792208, -48.47130829262645],[-1.4138060788640796, -48.47632690113655],[-1.4250439194776898, -48.486503277844285]])

D = 2
K = 4
N = (len(db))

means = np.zeros((K,D))

ValdeCans = [-1.37917,-48.4761]

cont=0
while cont <= K-1:# Seleciona 3 pontos aleatorios sem repetição
  i = np.random.choice(N)
  if db[i] in means:
    continue 
  else: 
    means[cont] = db[i]
    cont += 1 

means[K-1] = ValdeCans

clusterId = np.zeros(N)

maxIter = 100

for iter in range(maxIter):  
  #Para verificar
  oldClusterId = clusterId.copy()

  #redefine cores(clusters para os bairros)
  for bairro in range(N):
    mCent = None
    mDist = float('inf')
    for aeroporto in range(K): #means
      dist = (db[bairro]- means[aeroporto]).dot(db[bairro]- means[aeroporto]) 
      if dist < mDist:
        mDist = dist
        mCent = aeroporto #define melhor centro
    clusterId[bairro] = mCent

  #redefine aeroportos (clusters)
  means[0,:] = db[clusterId==0].mean(axis=0)
  means[1,:] = db[clusterId==1].mean(axis=0)
  means[2,:] = db[clusterId==2].mean(axis=0)

  #Verifica variação
  if np.all(oldClusterId == clusterId):
    print("Número de iterações:",iter)
    break

plt.scatter(means[0,1], means[0,0],s=50,c='black',marker='*')
plt.scatter(means[1,1], means[1,0],s=50,c='black',marker='*')
plt.scatter(means[2,1], means[2,0],s=50,c='black',marker='*')
plt.scatter(means[3,1], means[3,0],s=100,c='red',marker='x')

plt.scatter(db[:,1], db[:,0],c=clusterId)
plt.show()
